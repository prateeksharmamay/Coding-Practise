import java.util.Stack;

public class QueueUsingTwoStacks{

    /**
     * For Enqueue: Insert the value into stack s1
     * 
     * For Dequeue:
     *  a) if stack s2 is not null: pop the top value and return
     *  b) if it is null, then empty the stack s1 into stack s2. Then pop the first element from stack s2.
    */
    Stack<Integer> s1; // To insert into queue
    Stack<Integer> s2; // To pop from queue
    
    CustomQueue(){
        s1 = new Stack();
        s2 = new Stack();
    }
    
    public void enque(int val) {
        s1.push(val);
        System.out.println("Stack s1: " + s1.toString());
    }
    
    public int dequeue() {
        System.out.println("Before Deque:");
        System.out.println("Stack s1: " + s1.toString());
        System.out.println("Stack s2: " + s2.toString());
        if(s2.isEmpty()){
            while(!s1.isEmpty()) {
                s2.push(s1.pop());
            }
        }
        int deleted = s2.pop();
        System.out.println("After Deque:");
        System.out.println("Stack s1: " + s1.toString());
        System.out.println("Stack s2: " + s2.toString());
        System.out.println("Deleted: " + deleted);
        return deleted;
    }
    
    public int size() {
        System.out.println("Q size:");
        System.out.println("Stack s1: " + s1.toString());
        System.out.println("Stack s2: " + s2.toString());
        int qsize = s1.size() + s2.size();
        System.out.println("Size: " + qsize);
        return qsize;
    }
    
    public boolean isEmpty() {
        return s1.isEmpty() && s2.isEmpty();
    }

     public static void main(String []args){
         
        QueueUsingTwoStacks q = new QueueUsingTwoStacks();
        
        q.enque(1);
        q.enque(2);
        q.enque(3);
        q.dequeue();
        q.enque(4);
        q.size();
        q.dequeue();
        q.dequeue();
        q.dequeue();
        q.isEmpty();
        q.enque(5);
        q.enque(6);
        q.size();
     }
}
